1) Прототипное наследование
В JavaScript объекты имеют специальное скрытое свойство [[Prototype]] (так оно названо в спецификации), которое либо равно null, либо ссылается на другой объект. Этот объект называется «прототип»:Прототип даёт нам немного «магии». Когда мы хотим прочитать свойство из object, а оно отсутствует, JavaScript автоматически берёт его из прототипа. В программировании такой механизм называется «прототипным наследованием». Многие интересные возможности языка и техники программирования основываются на нём.Свойство [[Prototype]] является внутренним и скрытым, но есть много способов задать его.

2) Инкапсуляция
Инкапсуляция является одним из ключевых понятий объектно-ориентированного программирования и представляет сокрытие состояния объекта от прямого доступа извне. По умолчанию все свойства объектов являются публичными, общедоступными, и мы к ним можем обратиться из любого места программы. Но мы можем их скрыть от доступа извне, сделав свойства локальными переменными.Для того, чтобы работать с возрастом пользователя извне, определяются два метода. Метод getAge() предназначен для получения значения переменной _age. Этот метод еще называется геттер (getter). Второй метод - setAge, который еще называется сеттер (setter), предназначен для установки значения переменной _age.
Плюсом такого подхода является то, что мы имеем больший контроль над доступом к значению _age. Например, мы можем проверить какие-то сопутствующие условия, как в данном случае проверяются тип значение (он должен представлять число), само значение (возраст не может быть меньше 0).
(https://metanit.com/web/javascript/4.7.php)

3) Утечка памяти
Утечки памяти происходят, когда браузер по какой-то причине не может освободить память от недостижимых объектов.

4)Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ. Но, как было описано выше, в JavaScript, все функции изначально являются замыканиями То есть, они автоматически запоминают, где были созданы, с помощью скрытого свойства [[Environment]] и все они могут получить доступ к внешним переменным.
Если вы объявляете функцию внутри другой функции, первая получает доступ к переменным и аргументам последней.
Именно за эти свойства такие «вложенные» функции в JavaScript называют замыканиями (термином, пришедшим из функциональных языков программирования) — они «замыкают» на себя переменные и аргументы функции, внутри которой определены.

5) Анонимная функция
Главной идеей является то, что анонимная функция вызывается сразу после своего объявления. Преимущество от использования самовызывающихся функций вы получите, если нужно выполнить код один раз и сохранить его резульататы во "внешней среде" (без объявления глобальных переменных).

6)Контекст выполнения функции — это одно из фундаментальных понятий в JavaScript. Контекстом еще часто называют значение переменной this внутри функции. 
this указывает на тот объект в контексте, которого это было вызвано!

7)Область видимости переменной — это часть контекста выполнения, в котором эта переменная существует. Область видимости определяет, есть ли у вас доступ к переменной в данном контексте выполнения.
7.1 Переменные, объявленные в функции, являются локальными переменными и доступны только в этой функции или в функциях, определяемых внутри этой функции (данный прием называется замыканием).
7.2 Все переменные, объявленные вне функций, попадают в глобальную область видимости.

8) Подъем переменных
Если переменная определена внутри функции, она поднимается к верхней части функции, если глобально — к верхней части глобального контекста. При этом поднимается только объявление функции без инициализации. 

9)
9.1 Function Declaration
sum();
function sum() {
  alert('Сработало!');
}
Дело в том, что прежде, чем выполнять код, интерпретатор проходится по нему и собирает в специальное место все объявления переменных и функций. Получается, что он, интепретатор, уже знает весь исходный код функции и может ее вызвать, даже если она написана ниже по коду.
9.2Function Expression
var age = 17;

if(age >= 18) {
  var func = function() {
   alert('Добро пожаловать!');
  };
} else {
  var func = function() {
   alert('Вам еще рановато!');
  };
}
func();

10) Привязка контекста
Использовать bind для привязки контекста, возвращает новую функци, аргументы функции перечисляются через запятую
call - изменяет функцию, параметры передаются через запятую
apply - изменяет функцию, параметры передаются массивом

11)== и ===
Оператор == сравнивает на равенство, а вот === — на идентичность. Плюс оператора === состоит в том, что он не приводит два значения к одному типу. Именно из-за этого он обычно и используется.

12)Что вернет выражение +new Date()? Чем отличается от Date.now(). Отличный вопрос. Ответ в том, что +new Date(); создаст экземпляр объекта Date и благодаря + переведет его в числовой формат. Во втором случае вызовется статический метод конструктора, который является более приоритетным, т.к. во-первых он не требует создания экземпляра, а во-вторых является более понятным.

13) «О-большое»
### Ломаем стереотипы о О большом.
Важно помнить, что "О большое" это просто распространённый и понятный каждому способ говорить о сложности алгоритмов и задач. "О" показывает порядок сложности, на естественном языке это может быть записано как "затраты на выполнение этого алгоритма - Х". Более формальная запись - О(Х). Теперь посмотрим, что скрывается под X.

### Размер задачи.
"О большое" нужно для понимания зависимости от размера задачи, которую вы собираетесь решать. Классический пример это сортировка массива чисел. "О большое" показывает насколько эффективен алгоритм в зависитмости от длины списка. 
14)DOM
Расшифровывается DOM как Document Object Model,объектная модель документа. Фактически, это программный интерфейс, который позволяет получить доступ к отдельным элементам открытого в браузере документа. Это весьма важно, к примеру, для выполняемых браузером скриптов, каким-либо образом модифицирующих содержимое страницы.
